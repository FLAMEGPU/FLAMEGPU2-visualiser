# Compile project on Windows
name: Windows

on:
  # Branch pushes that do not only modify other workflow files
  push:
    branches:
      - '**'
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/Windows.yml"
  # Disabled for now. See https://github.com/FLAMEGPU/FLAMEGPU2/pull/644
  # pull_request:
  # Allow manual invocation.
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.cudacxx.os }}
    strategy:
      fail-fast: false
      # Multiplicative build matrix
      # optional exclude: can be partial, include: must be specific
      matrix:
        cudacxx:
          # CUDA 13.x
          - cuda: "13.0.0"
            cuda_arch: "75"
            hostcxx: "Visual Studio 17 2022"
            os: windows-2025
          # Newest and oldest CUDA 12.x we support. 12.4 is the oldest officially supported by MSVC >= 1940, but we have a workaround in place
          - cuda: "12.9.1"
            cuda_arch: "50"
            hostcxx: "Visual Studio 17 2022"
            os: windows-2025
          - cuda: "12.0.0"
            cuda_arch: "50"
            hostcxx: "Visual Studio 17 2022"
            os: windows-2022
        config:
          - name: "Release"
            config: "Release"

    # Name the job based on matrix/env options
    name: "build (${{ matrix.cudacxx.cuda }}, ${{ matrix.config.name }}, ${{ matrix.cudacxx.os }})"

    # Define job-wide env constants, and promote matrix elements to env constants for portable steps.
    env:
      # Define constants
      BUILD_DIR: "build"
      BUILD_TESTS: "OFF"
      # Port matrix options to environment, for more portability.
      CUDA: ${{ matrix.cudacxx.cuda }}
      CUDA_ARCH: ${{ matrix.cudacxx.cuda_arch }}
      HOSTCXX: ${{ matrix.cudacxx.hostcxx }}
      OS: ${{ matrix.cudacxx.os }}
      CONFIG: ${{ matrix.config.config }}
      # Kept for portable steps between this and the main repository.
      VISUALISATION: "ON"
      # Ensure MSVC >= 1940 works with CUDA <= 12.3
      NVCC_PREPEND_FLAGS: "-D_ALLOW_COMPILER_AND_STL_VERSION_MISMATCH --allow-unsupported-compiler"

    steps:
    - uses: actions/checkout@v3

    - name: Install CUDA (Windows)
      if: ${{ runner.os == 'Windows' && env.CUDA != '' }}
      shell: powershell
      timeout-minutes: 35
      env:
        cuda: ${{ env.CUDA }}
        visual_studio: ${{ env.HOSTCXX }}
      run: |
        if ([version]$env:cuda -ge [version]"12.0") {
          .github\scripts\install_cuda_windows_redist.ps1
        } else {
          .github\scripts\install_cuda_windows.ps1
        }

    - name: Add custom problem matchers for annotations
      run: echo "::add-matcher::.github/problem-matchers.json"

    - name: Configure cmake
      run: >
        cmake . -B "${{ env.BUILD_DIR }}" 
        -G "${{ env.HOSTCXX }}" -A x64
        -Werror=dev
        -DCMAKE_WARN_DEPRECATED="OFF"
        -DFLAMEGPU_WARNINGS_AS_ERRORS="ON"
        -DCMAKE_CUDA_ARCHITECTURES="${{ env.CUDA_ARCH }}"

    - name: Build
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --config ${{ env.CONFIG }} --target ALL_BUILD --verbose -j `nproc`
