# Compile project on Ubuntu
name: Ubuntu

on:
  push:
  pull_request:

jobs:
  build-visualiser:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 20.04 supports CUDA 11.0+ (gcc >= 5 && gcc <= 10). SM < 52 deprecated since 11.0
          - os: ubuntu-20.04
            cuda: "11.2"
            cuda_arch: "52"
            gcc: 10
          # 18.04 supports CUDA 10.0+ (gcc <=8), 11.0+ (gcc<=9), 11.1+ (gcc<=10)
          # - os: ubuntu-18.04
          #   cuda: "10.0"
          #   cuda_arch: "35"
          #   gcc: 7
    env:
      build_dir: "build"
      config: "Release"
      build_tests: "ON"
      Werror: "ON"

    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      run: |
        source ./scripts/actions/install_cuda_ubuntu.sh
        if [[ $? -eq 0 ]]; then
          # Set paths for subsequent steps, using ${CUDA_PATH}
          echo "Adding CUDA to CUDA_PATH, PATH and LD_LIBRARY_PATH"
          echo "CUDA_PATH=${CUDA_PATH}" >> $GITHUB_ENV
          echo "${CUDA_PATH}/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        fi
      shell: bash

    # Specify the correct host compilers
    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV

    - name: Install visualisation dev dependencies
      run: sudo apt-get install libsdl2-dev libglew-dev libfreetype-dev libdevil-dev libglu1-mesa-dev libfontconfig1-dev

    - name: Configure cmake
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }} -Wno-error=dev

    - name: Build Visualiser
      run: cmake --build . --target all --verbose -j `nproc`
      working-directory: ${{ env.build_dir }}
